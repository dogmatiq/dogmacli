// Code generated by Dogma CLI. DO NOT EDIT.

package lsp

import "net/url"

// AnnotatedTextEdit is a structure.
type AnnotatedTextEdit struct{}

// ApplyWorkspaceEditParams is a structure.
type ApplyWorkspaceEditParams struct{}

// ApplyWorkspaceEditResult is a structure.
type ApplyWorkspaceEditResult struct{}

// BaseSymbolInformation is a structure.
type BaseSymbolInformation struct{}

// Bool is the LSP boolean type.
type Bool bool

// CallHierarchyClientCapabilities is a structure.
type CallHierarchyClientCapabilities struct{}

// CallHierarchyIncomingCall is a structure.
type CallHierarchyIncomingCall struct{}

// CallHierarchyIncomingCallArray is an array of CallHierarchyIncomingCall elements.
type CallHierarchyIncomingCallArray []CallHierarchyIncomingCall

// CallHierarchyIncomingCallsParams is a structure.
type CallHierarchyIncomingCallsParams struct{}

// CallHierarchyItem is a structure.
type CallHierarchyItem struct{}

// CallHierarchyItemArray is an array of CallHierarchyItem elements.
type CallHierarchyItemArray []CallHierarchyItem

// CallHierarchyOptions is a structure.
type CallHierarchyOptions struct{}

// CallHierarchyOutgoingCall is a structure.
type CallHierarchyOutgoingCall struct{}

// CallHierarchyOutgoingCallArray is an array of CallHierarchyOutgoingCall elements.
type CallHierarchyOutgoingCallArray []CallHierarchyOutgoingCall

// CallHierarchyOutgoingCallsParams is a structure.
type CallHierarchyOutgoingCallsParams struct{}

// CallHierarchyPrepareParams is a structure.
type CallHierarchyPrepareParams struct{}

// CallHierarchyRegistrationOptions is a structure.
type CallHierarchyRegistrationOptions struct{}

// CancelParams is a structure.
type CancelParams struct{}

// CancelParamsID is a union of <TODO>.
type CancelParamsID interface{}

// ChangeAnnotation is a structure.
type ChangeAnnotation struct{}

// ChangeAnnotationIdentifier is an alias for String.
type ChangeAnnotationIdentifier = String

// ChangeAnnotationMap is an array of ChangeAnnotationIdentifier to ChangeAnnotation.
type ChangeAnnotationMap map[ChangeAnnotationIdentifier]ChangeAnnotation

// ClientCapabilities is a structure.
type ClientCapabilities struct{}

// CodeAction is a structure.
type CodeAction struct{}

// CodeActionClientCapabilities is a structure.
type CodeActionClientCapabilities struct{}

// CodeActionClientCapabilitiesCodeActionLiteralSupport is a literal structure.
type CodeActionClientCapabilitiesCodeActionLiteralSupport struct{}

// CodeActionClientCapabilitiesCodeActionLiteralSupportCodeActionKind is a literal structure.
type CodeActionClientCapabilitiesCodeActionLiteralSupportCodeActionKind struct{}

// CodeActionClientCapabilitiesResolveSupport is a literal structure.
type CodeActionClientCapabilitiesResolveSupport struct{}

// CodeActionContext is a structure.
type CodeActionContext struct{}

// CodeActionDisabled is a literal structure.
type CodeActionDisabled struct{}

// CodeActionKind is an enumeration of String values.
//
// Documentation from the LSP specification:
//
//	A set of predefined code action kinds
type CodeActionKind String

const (
	// EmptyCodeActionKind is a member of the CodeActionKind enumeration.
	//
	// Documentation from the LSP specification:
	//
	//	Empty kind.
	EmptyCodeActionKind CodeActionKind = ""

	// QuickFixCodeActionKind is a member of the CodeActionKind enumeration.
	//
	// Documentation from the LSP specification:
	//
	//	Base kind for quickfix actions: 'quickfix'
	QuickFixCodeActionKind CodeActionKind = "quickfix"

	// RefactorCodeActionKind is a member of the CodeActionKind enumeration.
	//
	// Documentation from the LSP specification:
	//
	//	Base kind for refactoring actions: 'refactor'
	RefactorCodeActionKind CodeActionKind = "refactor"

	// RefactorExtractCodeActionKind is a member of the CodeActionKind enumeration.
	//
	// Documentation from the LSP specification:
	//
	//	Base kind for refactoring extraction actions: 'refactor.extract'
	//
	//	Example extract actions:
	//
	//	- Extract method
	//	- Extract function
	//	- Extract variable
	//	- Extract interface from class
	//	- ...
	RefactorExtractCodeActionKind CodeActionKind = "refactor.extract"

	// RefactorInlineCodeActionKind is a member of the CodeActionKind enumeration.
	//
	// Documentation from the LSP specification:
	//
	//	Base kind for refactoring inline actions: 'refactor.inline'
	//
	//	Example inline actions:
	//
	//	- Inline function
	//	- Inline variable
	//	- Inline constant
	//	- ...
	RefactorInlineCodeActionKind CodeActionKind = "refactor.inline"

	// RefactorRewriteCodeActionKind is a member of the CodeActionKind enumeration.
	//
	// Documentation from the LSP specification:
	//
	//	Base kind for refactoring rewrite actions: 'refactor.rewrite'
	//
	//	Example rewrite actions:
	//
	//	- Convert JavaScript function to class
	//	- Add or remove parameter
	//	- Encapsulate field
	//	- Make method static
	//	- Move method to base class
	//	- ...
	RefactorRewriteCodeActionKind CodeActionKind = "refactor.rewrite"

	// SourceCodeActionKind is a member of the CodeActionKind enumeration.
	//
	// Documentation from the LSP specification:
	//
	//	Base kind for source actions: `source`
	//
	//	Source code actions apply to the entire file.
	SourceCodeActionKind CodeActionKind = "source"

	// SourceOrganizeImportsCodeActionKind is a member of the CodeActionKind enumeration.
	//
	// Documentation from the LSP specification:
	//
	//	Base kind for an organize imports source action: `source.organizeImports`
	SourceOrganizeImportsCodeActionKind CodeActionKind = "source.organizeImports"

	// SourceFixAllCodeActionKind is a member of the CodeActionKind enumeration.
	//
	// Documentation from the LSP specification:
	//
	//	Base kind for auto-fix source actions: `source.fixAll`.
	//
	//	Fix all actions automatically fix errors that have a clear fix that do not require user input.
	//	They should not suppress errors or perform unsafe fixes such as generating new types or classes.
	//
	//	@since 3.15.0
	SourceFixAllCodeActionKind CodeActionKind = "source.fixAll"
)

// CodeActionKindArray is an array of CodeActionKind elements.
type CodeActionKindArray []CodeActionKind

// CodeActionOptions is a structure.
type CodeActionOptions struct{}

// CodeActionParams is a structure.
type CodeActionParams struct{}

// CodeActionRegistrationOptions is a structure.
type CodeActionRegistrationOptions struct{}

// CodeActionTriggerKind is an enumeration of UInt values.
//
// Documentation from the LSP specification:
//
//	The reason why code actions were requested.
//
//	@since 3.17.0
type CodeActionTriggerKind UInt

const (
	// InvokedCodeActionTriggerKind is a member of the CodeActionTriggerKind enumeration.
	//
	// Documentation from the LSP specification:
	//
	//	Code actions were explicitly requested by the user or by an extension.
	InvokedCodeActionTriggerKind CodeActionTriggerKind = 1

	// AutomaticCodeActionTriggerKind is a member of the CodeActionTriggerKind enumeration.
	//
	// Documentation from the LSP specification:
	//
	//	Code actions were requested automatically.
	//
	//	This typically happens when current selection in a file changes, but can
	//	also be triggered when file content changes.
	AutomaticCodeActionTriggerKind CodeActionTriggerKind = 2
)

// CodeDescription is a structure.
type CodeDescription struct{}

// CodeLens is a structure.
type CodeLens struct{}

// CodeLensArray is an array of CodeLens elements.
type CodeLensArray []CodeLens

// CodeLensClientCapabilities is a structure.
type CodeLensClientCapabilities struct{}

// CodeLensOptions is a structure.
type CodeLensOptions struct{}

// CodeLensParams is a structure.
type CodeLensParams struct{}

// CodeLensRegistrationOptions is a structure.
type CodeLensRegistrationOptions struct{}

// CodeLensWorkspaceClientCapabilities is a structure.
type CodeLensWorkspaceClientCapabilities struct{}

// Color is a structure.
type Color struct{}

// ColorInformation is a structure.
type ColorInformation struct{}

// ColorInformationArray is an array of ColorInformation elements.
type ColorInformationArray []ColorInformation

// ColorPresentation is a structure.
type ColorPresentation struct{}

// ColorPresentationArray is an array of ColorPresentation elements.
type ColorPresentationArray []ColorPresentation

// ColorPresentationParams is a structure.
type ColorPresentationParams struct{}

// Command is a structure.
type Command struct{}

// CompletionClientCapabilities is a structure.
type CompletionClientCapabilities struct{}

// CompletionClientCapabilitiesCompletionItem is a literal structure.
type CompletionClientCapabilitiesCompletionItem struct{}

// CompletionClientCapabilitiesCompletionItemInsertTextModeSupport is a literal structure.
type CompletionClientCapabilitiesCompletionItemInsertTextModeSupport struct{}

// CompletionClientCapabilitiesCompletionItemKind is a literal structure.
type CompletionClientCapabilitiesCompletionItemKind struct{}

// CompletionClientCapabilitiesCompletionItemResolveSupport is a literal structure.
type CompletionClientCapabilitiesCompletionItemResolveSupport struct{}

// CompletionClientCapabilitiesCompletionItemTagSupport is a literal structure.
type CompletionClientCapabilitiesCompletionItemTagSupport struct{}

// CompletionClientCapabilitiesCompletionList is a literal structure.
type CompletionClientCapabilitiesCompletionList struct{}

// CompletionContext is a structure.
type CompletionContext struct{}

// CompletionItem is a structure.
type CompletionItem struct{}

// CompletionItemArray is an array of CompletionItem elements.
type CompletionItemArray []CompletionItem

// CompletionItemDocumentation is a union of <TODO>.
type CompletionItemDocumentation interface{}

// CompletionItemKind is an enumeration of UInt values.
//
// Documentation from the LSP specification:
//
//	The kind of a completion entry.
type CompletionItemKind UInt

const (
	// TextCompletionItemKind is a member of the CompletionItemKind enumeration.
	TextCompletionItemKind CompletionItemKind = 1

	// MethodCompletionItemKind is a member of the CompletionItemKind enumeration.
	MethodCompletionItemKind CompletionItemKind = 2

	// FunctionCompletionItemKind is a member of the CompletionItemKind enumeration.
	FunctionCompletionItemKind CompletionItemKind = 3

	// ConstructorCompletionItemKind is a member of the CompletionItemKind enumeration.
	ConstructorCompletionItemKind CompletionItemKind = 4

	// FieldCompletionItemKind is a member of the CompletionItemKind enumeration.
	FieldCompletionItemKind CompletionItemKind = 5

	// VariableCompletionItemKind is a member of the CompletionItemKind enumeration.
	VariableCompletionItemKind CompletionItemKind = 6

	// ClassCompletionItemKind is a member of the CompletionItemKind enumeration.
	ClassCompletionItemKind CompletionItemKind = 7

	// InterfaceCompletionItemKind is a member of the CompletionItemKind enumeration.
	InterfaceCompletionItemKind CompletionItemKind = 8

	// ModuleCompletionItemKind is a member of the CompletionItemKind enumeration.
	ModuleCompletionItemKind CompletionItemKind = 9

	// PropertyCompletionItemKind is a member of the CompletionItemKind enumeration.
	PropertyCompletionItemKind CompletionItemKind = 10

	// UnitCompletionItemKind is a member of the CompletionItemKind enumeration.
	UnitCompletionItemKind CompletionItemKind = 11

	// ValueCompletionItemKind is a member of the CompletionItemKind enumeration.
	ValueCompletionItemKind CompletionItemKind = 12

	// EnumCompletionItemKind is a member of the CompletionItemKind enumeration.
	EnumCompletionItemKind CompletionItemKind = 13

	// KeywordCompletionItemKind is a member of the CompletionItemKind enumeration.
	KeywordCompletionItemKind CompletionItemKind = 14

	// SnippetCompletionItemKind is a member of the CompletionItemKind enumeration.
	SnippetCompletionItemKind CompletionItemKind = 15

	// ColorCompletionItemKind is a member of the CompletionItemKind enumeration.
	ColorCompletionItemKind CompletionItemKind = 16

	// FileCompletionItemKind is a member of the CompletionItemKind enumeration.
	FileCompletionItemKind CompletionItemKind = 17

	// ReferenceCompletionItemKind is a member of the CompletionItemKind enumeration.
	ReferenceCompletionItemKind CompletionItemKind = 18

	// FolderCompletionItemKind is a member of the CompletionItemKind enumeration.
	FolderCompletionItemKind CompletionItemKind = 19

	// EnumMemberCompletionItemKind is a member of the CompletionItemKind enumeration.
	EnumMemberCompletionItemKind CompletionItemKind = 20

	// ConstantCompletionItemKind is a member of the CompletionItemKind enumeration.
	ConstantCompletionItemKind CompletionItemKind = 21

	// StructCompletionItemKind is a member of the CompletionItemKind enumeration.
	StructCompletionItemKind CompletionItemKind = 22

	// EventCompletionItemKind is a member of the CompletionItemKind enumeration.
	EventCompletionItemKind CompletionItemKind = 23

	// OperatorCompletionItemKind is a member of the CompletionItemKind enumeration.
	OperatorCompletionItemKind CompletionItemKind = 24

	// TypeParameterCompletionItemKind is a member of the CompletionItemKind enumeration.
	TypeParameterCompletionItemKind CompletionItemKind = 25
)

// CompletionItemKindArray is an array of CompletionItemKind elements.
type CompletionItemKindArray []CompletionItemKind

// CompletionItemLabelDetails is a structure.
type CompletionItemLabelDetails struct{}

// CompletionItemTag is an enumeration of UInt values.
//
// Documentation from the LSP specification:
//
//	Completion item tags are extra annotations that tweak the rendering of a completion
//	item.
//
//	@since 3.15.0
type CompletionItemTag UInt

const (
	// DeprecatedCompletionItemTag is a member of the CompletionItemTag enumeration.
	//
	// Documentation from the LSP specification:
	//
	//	Render a completion as obsolete, usually using a strike-out.
	DeprecatedCompletionItemTag CompletionItemTag = 1
)

// CompletionItemTagArray is an array of CompletionItemTag elements.
type CompletionItemTagArray []CompletionItemTag

// CompletionItemTextEdit is a union of <TODO>.
type CompletionItemTextEdit interface{}

// CompletionList is a structure.
type CompletionList struct{}

// CompletionListItemDefaults is a literal structure.
type CompletionListItemDefaults struct{}

// CompletionListItemDefaultsEditRange is a union of <TODO>.
type CompletionListItemDefaultsEditRange interface{}

// CompletionListItemDefaultsEditRangeOption2 is a literal structure.
type CompletionListItemDefaultsEditRangeOption2 struct{}

// CompletionOptions is a structure.
type CompletionOptions struct{}

// CompletionOptionsCompletionItem is a literal structure.
type CompletionOptionsCompletionItem struct{}

// CompletionParams is a structure.
type CompletionParams struct{}

// CompletionRegistrationOptions is a structure.
type CompletionRegistrationOptions struct{}

// CompletionTriggerKind is an enumeration of UInt values.
//
// Documentation from the LSP specification:
//
//	How a completion was triggered
type CompletionTriggerKind UInt

const (
	// InvokedCompletionTriggerKind is a member of the CompletionTriggerKind enumeration.
	//
	// Documentation from the LSP specification:
	//
	//	Completion was triggered by typing an identifier (24x7 code
	//	complete), manual invocation (e.g Ctrl+Space) or via API.
	InvokedCompletionTriggerKind CompletionTriggerKind = 1

	// TriggerCharacterCompletionTriggerKind is a member of the CompletionTriggerKind enumeration.
	//
	// Documentation from the LSP specification:
	//
	//	Completion was triggered by a trigger character specified by
	//	the `triggerCharacters` properties of the `CompletionRegistrationOptions`.
	TriggerCharacterCompletionTriggerKind CompletionTriggerKind = 2

	// TriggerForIncompleteCompletionsCompletionTriggerKind is a member of the CompletionTriggerKind enumeration.
	//
	// Documentation from the LSP specification:
	//
	//	Completion was re-triggered as current completion list is incomplete
	TriggerForIncompleteCompletionsCompletionTriggerKind CompletionTriggerKind = 3
)

// ConfigurationItem is a structure.
type ConfigurationItem struct{}

// ConfigurationItemArray is an array of ConfigurationItem elements.
type ConfigurationItemArray []ConfigurationItem

// ConfigurationParams is a structure.
type ConfigurationParams struct{}

// CreateFile is a structure.
type CreateFile struct{}

// CreateFileOptions is a structure.
type CreateFileOptions struct{}

// CreateFilesParams is a structure.
type CreateFilesParams struct{}

// Decimal is the LSP decimal type.
type Decimal float64

// Declaration is a union of <TODO>.
type Declaration interface{}

// DeclarationClientCapabilities is a structure.
type DeclarationClientCapabilities struct{}

// DeclarationLink is an alias for LocationLink.
type DeclarationLink = LocationLink

// DeclarationLinkArray is an array of DeclarationLink elements.
type DeclarationLinkArray []DeclarationLink

// DeclarationOptions is a structure.
type DeclarationOptions struct{}

// DeclarationParams is a structure.
type DeclarationParams struct{}

// DeclarationRegistrationOptions is a structure.
type DeclarationRegistrationOptions struct{}

// Definition is a union of <TODO>.
type Definition interface{}

// DefinitionClientCapabilities is a structure.
type DefinitionClientCapabilities struct{}

// DefinitionLink is an alias for LocationLink.
type DefinitionLink = LocationLink

// DefinitionLinkArray is an array of DefinitionLink elements.
type DefinitionLinkArray []DefinitionLink

// DefinitionOptions is a structure.
type DefinitionOptions struct{}

// DefinitionParams is a structure.
type DefinitionParams struct{}

// DefinitionRegistrationOptions is a structure.
type DefinitionRegistrationOptions struct{}

// DeleteFile is a structure.
type DeleteFile struct{}

// DeleteFileOptions is a structure.
type DeleteFileOptions struct{}

// DeleteFilesParams is a structure.
type DeleteFilesParams struct{}

// Diagnostic is a structure.
type Diagnostic struct{}

// DiagnosticArray is an array of Diagnostic elements.
type DiagnosticArray []Diagnostic

// DiagnosticClientCapabilities is a structure.
type DiagnosticClientCapabilities struct{}

// DiagnosticCode is a union of <TODO>.
type DiagnosticCode interface{}

// DiagnosticOptions is a structure.
type DiagnosticOptions struct{}

// DiagnosticRegistrationOptions is a structure.
type DiagnosticRegistrationOptions struct{}

// DiagnosticRelatedInformation is a structure.
type DiagnosticRelatedInformation struct{}

// DiagnosticRelatedInformationArray is an array of DiagnosticRelatedInformation elements.
type DiagnosticRelatedInformationArray []DiagnosticRelatedInformation

// DiagnosticServerCancellationData is a structure.
type DiagnosticServerCancellationData struct{}

// DiagnosticSeverity is an enumeration of UInt values.
//
// Documentation from the LSP specification:
//
//	The diagnostic's severity.
type DiagnosticSeverity UInt

const (
	// ErrorDiagnosticSeverity is a member of the DiagnosticSeverity enumeration.
	//
	// Documentation from the LSP specification:
	//
	//	Reports an error.
	ErrorDiagnosticSeverity DiagnosticSeverity = 1

	// WarningDiagnosticSeverity is a member of the DiagnosticSeverity enumeration.
	//
	// Documentation from the LSP specification:
	//
	//	Reports a warning.
	WarningDiagnosticSeverity DiagnosticSeverity = 2

	// InformationDiagnosticSeverity is a member of the DiagnosticSeverity enumeration.
	//
	// Documentation from the LSP specification:
	//
	//	Reports an information.
	InformationDiagnosticSeverity DiagnosticSeverity = 3

	// HintDiagnosticSeverity is a member of the DiagnosticSeverity enumeration.
	//
	// Documentation from the LSP specification:
	//
	//	Reports a hint.
	HintDiagnosticSeverity DiagnosticSeverity = 4
)

// DiagnosticTag is an enumeration of UInt values.
//
// Documentation from the LSP specification:
//
//	The diagnostic tags.
//
//	@since 3.15.0
type DiagnosticTag UInt

const (
	// UnnecessaryDiagnosticTag is a member of the DiagnosticTag enumeration.
	//
	// Documentation from the LSP specification:
	//
	//	Unused or unnecessary code.
	//
	//	Clients are allowed to render diagnostics with this tag faded out instead of having
	//	an error squiggle.
	UnnecessaryDiagnosticTag DiagnosticTag = 1

	// DeprecatedDiagnosticTag is a member of the DiagnosticTag enumeration.
	//
	// Documentation from the LSP specification:
	//
	//	Deprecated or obsolete code.
	//
	//	Clients are allowed to rendered diagnostics with this tag strike through.
	DeprecatedDiagnosticTag DiagnosticTag = 2
)

// DiagnosticTagArray is an array of DiagnosticTag elements.
type DiagnosticTagArray []DiagnosticTag

// DiagnosticWorkspaceClientCapabilities is a structure.
type DiagnosticWorkspaceClientCapabilities struct{}

// DidChangeConfigurationClientCapabilities is a structure.
type DidChangeConfigurationClientCapabilities struct{}

// DidChangeConfigurationParams is a structure.
type DidChangeConfigurationParams struct{}

// DidChangeConfigurationRegistrationOptions is a structure.
type DidChangeConfigurationRegistrationOptions struct{}

// DidChangeConfigurationRegistrationOptionsSection is a union of <TODO>.
type DidChangeConfigurationRegistrationOptionsSection interface{}

// DidChangeNotebookDocumentParams is a structure.
type DidChangeNotebookDocumentParams struct{}

// DidChangeTextDocumentParams is a structure.
type DidChangeTextDocumentParams struct{}

// DidChangeWatchedFilesClientCapabilities is a structure.
type DidChangeWatchedFilesClientCapabilities struct{}

// DidChangeWatchedFilesParams is a structure.
type DidChangeWatchedFilesParams struct{}

// DidChangeWatchedFilesRegistrationOptions is a structure.
type DidChangeWatchedFilesRegistrationOptions struct{}

// DidChangeWorkspaceFoldersParams is a structure.
type DidChangeWorkspaceFoldersParams struct{}

// DidCloseNotebookDocumentParams is a structure.
type DidCloseNotebookDocumentParams struct{}

// DidCloseTextDocumentParams is a structure.
type DidCloseTextDocumentParams struct{}

// DidOpenNotebookDocumentParams is a structure.
type DidOpenNotebookDocumentParams struct{}

// DidOpenTextDocumentParams is a structure.
type DidOpenTextDocumentParams struct{}

// DidSaveNotebookDocumentParams is a structure.
type DidSaveNotebookDocumentParams struct{}

// DidSaveTextDocumentParams is a structure.
type DidSaveTextDocumentParams struct{}

// DocumentColorClientCapabilities is a structure.
type DocumentColorClientCapabilities struct{}

// DocumentColorOptions is a structure.
type DocumentColorOptions struct{}

// DocumentColorParams is a structure.
type DocumentColorParams struct{}

// DocumentColorRegistrationOptions is a structure.
type DocumentColorRegistrationOptions struct{}

// DocumentDiagnosticParams is a structure.
type DocumentDiagnosticParams struct{}

// DocumentDiagnosticReport is a union of <TODO>.
type DocumentDiagnosticReport interface{}

// DocumentDiagnosticReportKind is an enumeration of String values.
//
// Documentation from the LSP specification:
//
//	The document diagnostic report kinds.
//
//	@since 3.17.0
type DocumentDiagnosticReportKind String

const (
	// FullDocumentDiagnosticReportKind is a member of the DocumentDiagnosticReportKind enumeration.
	//
	// Documentation from the LSP specification:
	//
	//	A diagnostic report with a full
	//	set of problems.
	FullDocumentDiagnosticReportKind DocumentDiagnosticReportKind = "full"

	// UnchangedDocumentDiagnosticReportKind is a member of the DocumentDiagnosticReportKind enumeration.
	//
	// Documentation from the LSP specification:
	//
	//	A report indicating that the last
	//	returned report is still accurate.
	UnchangedDocumentDiagnosticReportKind DocumentDiagnosticReportKind = "unchanged"
)

// DocumentDiagnosticReportPartialResult is a structure.
type DocumentDiagnosticReportPartialResult struct{}

// DocumentDiagnosticReportPartialResultRelatedDocuments is a union of <TODO>.
type DocumentDiagnosticReportPartialResultRelatedDocuments interface{}

// DocumentDiagnosticReportPartialResultRelatedDocumentsMap is an array of DocumentURI to DocumentDiagnosticReportPartialResultRelatedDocuments.
type DocumentDiagnosticReportPartialResultRelatedDocumentsMap map[DocumentURI]DocumentDiagnosticReportPartialResultRelatedDocuments

// DocumentFilter is a union of <TODO>.
type DocumentFilter interface{}

// DocumentFilterArray is an array of DocumentFilter elements.
type DocumentFilterArray []DocumentFilter

// DocumentFormattingClientCapabilities is a structure.
type DocumentFormattingClientCapabilities struct{}

// DocumentFormattingOptions is a structure.
type DocumentFormattingOptions struct{}

// DocumentFormattingParams is a structure.
type DocumentFormattingParams struct{}

// DocumentFormattingRegistrationOptions is a structure.
type DocumentFormattingRegistrationOptions struct{}

// DocumentHighlight is a structure.
type DocumentHighlight struct{}

// DocumentHighlightArray is an array of DocumentHighlight elements.
type DocumentHighlightArray []DocumentHighlight

// DocumentHighlightClientCapabilities is a structure.
type DocumentHighlightClientCapabilities struct{}

// DocumentHighlightKind is an enumeration of UInt values.
//
// Documentation from the LSP specification:
//
//	A document highlight kind.
type DocumentHighlightKind UInt

const (
	// TextDocumentHighlightKind is a member of the DocumentHighlightKind enumeration.
	//
	// Documentation from the LSP specification:
	//
	//	A textual occurrence.
	TextDocumentHighlightKind DocumentHighlightKind = 1

	// ReadDocumentHighlightKind is a member of the DocumentHighlightKind enumeration.
	//
	// Documentation from the LSP specification:
	//
	//	Read-access of a symbol, like reading a variable.
	ReadDocumentHighlightKind DocumentHighlightKind = 2

	// WriteDocumentHighlightKind is a member of the DocumentHighlightKind enumeration.
	//
	// Documentation from the LSP specification:
	//
	//	Write-access of a symbol, like writing to a variable.
	WriteDocumentHighlightKind DocumentHighlightKind = 3
)

// DocumentHighlightOptions is a structure.
type DocumentHighlightOptions struct{}

// DocumentHighlightParams is a structure.
type DocumentHighlightParams struct{}

// DocumentHighlightRegistrationOptions is a structure.
type DocumentHighlightRegistrationOptions struct{}

// DocumentLink is a structure.
type DocumentLink struct{}

// DocumentLinkArray is an array of DocumentLink elements.
type DocumentLinkArray []DocumentLink

// DocumentLinkClientCapabilities is a structure.
type DocumentLinkClientCapabilities struct{}

// DocumentLinkOptions is a structure.
type DocumentLinkOptions struct{}

// DocumentLinkParams is a structure.
type DocumentLinkParams struct{}

// DocumentLinkRegistrationOptions is a structure.
type DocumentLinkRegistrationOptions struct{}

// DocumentOnTypeFormattingClientCapabilities is a structure.
type DocumentOnTypeFormattingClientCapabilities struct{}

// DocumentOnTypeFormattingOptions is a structure.
type DocumentOnTypeFormattingOptions struct{}

// DocumentOnTypeFormattingParams is a structure.
type DocumentOnTypeFormattingParams struct{}

// DocumentOnTypeFormattingRegistrationOptions is a structure.
type DocumentOnTypeFormattingRegistrationOptions struct{}

// DocumentRangeFormattingClientCapabilities is a structure.
type DocumentRangeFormattingClientCapabilities struct{}

// DocumentRangeFormattingOptions is a structure.
type DocumentRangeFormattingOptions struct{}

// DocumentRangeFormattingParams is a structure.
type DocumentRangeFormattingParams struct{}

// DocumentRangeFormattingRegistrationOptions is a structure.
type DocumentRangeFormattingRegistrationOptions struct{}

// DocumentSymbol is a structure.
type DocumentSymbol struct{}

// DocumentSymbolArray is an array of DocumentSymbol elements.
type DocumentSymbolArray []DocumentSymbol

// DocumentSymbolClientCapabilities is a structure.
type DocumentSymbolClientCapabilities struct{}

// DocumentSymbolClientCapabilitiesSymbolKind is a literal structure.
type DocumentSymbolClientCapabilitiesSymbolKind struct{}

// DocumentSymbolClientCapabilitiesTagSupport is a literal structure.
type DocumentSymbolClientCapabilitiesTagSupport struct{}

// DocumentSymbolOptions is a structure.
type DocumentSymbolOptions struct{}

// DocumentSymbolParams is a structure.
type DocumentSymbolParams struct{}

// DocumentSymbolRegistrationOptions is a structure.
type DocumentSymbolRegistrationOptions struct{}

// DocumentURI is the URI of a document.
type DocumentURI url.URL

// ErrorCodes is an enumeration of Int values.
//
// Documentation from the LSP specification:
//
//	Predefined error codes.
type ErrorCodes Int

const (
	// ParseErrorErrorCodes is a member of the ErrorCodes enumeration.
	ParseErrorErrorCodes ErrorCodes = -32700

	// InvalidRequestErrorCodes is a member of the ErrorCodes enumeration.
	InvalidRequestErrorCodes ErrorCodes = -32600

	// MethodNotFoundErrorCodes is a member of the ErrorCodes enumeration.
	MethodNotFoundErrorCodes ErrorCodes = -32601

	// InvalidParamsErrorCodes is a member of the ErrorCodes enumeration.
	InvalidParamsErrorCodes ErrorCodes = -32602

	// InternalErrorErrorCodes is a member of the ErrorCodes enumeration.
	InternalErrorErrorCodes ErrorCodes = -32603

	// ServerNotInitializedErrorCodes is a member of the ErrorCodes enumeration.
	//
	// Documentation from the LSP specification:
	//
	//	Error code indicating that a server received a notification or
	//	request before the server has received the `initialize` request.
	ServerNotInitializedErrorCodes ErrorCodes = -32002

	// UnknownErrorCodeErrorCodes is a member of the ErrorCodes enumeration.
	UnknownErrorCodeErrorCodes ErrorCodes = -32001
)

// ExecuteCommandClientCapabilities is a structure.
type ExecuteCommandClientCapabilities struct{}

// ExecuteCommandOptions is a structure.
type ExecuteCommandOptions struct{}

// ExecuteCommandParams is a structure.
type ExecuteCommandParams struct{}

// ExecuteCommandRegistrationOptions is a structure.
type ExecuteCommandRegistrationOptions struct{}

// ExecutionSummary is a structure.
type ExecutionSummary struct{}

// FailureHandlingKind is an enumeration of String values.
type FailureHandlingKind String

const (
	// AbortFailureHandlingKind is a member of the FailureHandlingKind enumeration.
	//
	// Documentation from the LSP specification:
	//
	//	Applying the workspace change is simply aborted if one of the changes provided
	//	fails. All operations executed before the failing operation stay executed.
	AbortFailureHandlingKind FailureHandlingKind = "abort"

	// TransactionalFailureHandlingKind is a member of the FailureHandlingKind enumeration.
	//
	// Documentation from the LSP specification:
	//
	//	All operations are executed transactional. That means they either all
	//	succeed or no changes at all are applied to the workspace.
	TransactionalFailureHandlingKind FailureHandlingKind = "transactional"

	// TextOnlyTransactionalFailureHandlingKind is a member of the FailureHandlingKind enumeration.
	//
	// Documentation from the LSP specification:
	//
	//	If the workspace edit contains only textual file changes they are executed transactional.
	//	If resource changes (create, rename or delete file) are part of the change the failure
	//	handling strategy is abort.
	TextOnlyTransactionalFailureHandlingKind FailureHandlingKind = "textOnlyTransactional"

	// UndoFailureHandlingKind is a member of the FailureHandlingKind enumeration.
	//
	// Documentation from the LSP specification:
	//
	//	The client tries to undo the operations already executed. But there is no
	//	guarantee that this is succeeding.
	UndoFailureHandlingKind FailureHandlingKind = "undo"
)

// FileChangeType is an enumeration of UInt values.
//
// Documentation from the LSP specification:
//
//	The file event type
type FileChangeType UInt

const (
	// CreatedFileChangeType is a member of the FileChangeType enumeration.
	//
	// Documentation from the LSP specification:
	//
	//	The file got created.
	CreatedFileChangeType FileChangeType = 1

	// ChangedFileChangeType is a member of the FileChangeType enumeration.
	//
	// Documentation from the LSP specification:
	//
	//	The file got changed.
	ChangedFileChangeType FileChangeType = 2

	// DeletedFileChangeType is a member of the FileChangeType enumeration.
	//
	// Documentation from the LSP specification:
	//
	//	The file got deleted.
	DeletedFileChangeType FileChangeType = 3
)

// FileCreate is a structure.
type FileCreate struct{}

// FileCreateArray is an array of FileCreate elements.
type FileCreateArray []FileCreate

// FileDelete is a structure.
type FileDelete struct{}

// FileDeleteArray is an array of FileDelete elements.
type FileDeleteArray []FileDelete

// FileEvent is a structure.
type FileEvent struct{}

// FileEventArray is an array of FileEvent elements.
type FileEventArray []FileEvent

// FileOperationClientCapabilities is a structure.
type FileOperationClientCapabilities struct{}

// FileOperationFilter is a structure.
type FileOperationFilter struct{}

// FileOperationFilterArray is an array of FileOperationFilter elements.
type FileOperationFilterArray []FileOperationFilter

// FileOperationOptions is a structure.
type FileOperationOptions struct{}

// FileOperationPattern is a structure.
type FileOperationPattern struct{}

// FileOperationPatternKind is an enumeration of String values.
//
// Documentation from the LSP specification:
//
//	A pattern kind describing if a glob pattern matches a file a folder or
//	both.
//
//	@since 3.16.0
type FileOperationPatternKind String

const (
	// FileFileOperationPatternKind is a member of the FileOperationPatternKind enumeration.
	//
	// Documentation from the LSP specification:
	//
	//	The pattern matches a file only.
	FileFileOperationPatternKind FileOperationPatternKind = "file"

	// FolderFileOperationPatternKind is a member of the FileOperationPatternKind enumeration.
	//
	// Documentation from the LSP specification:
	//
	//	The pattern matches a folder only.
	FolderFileOperationPatternKind FileOperationPatternKind = "folder"
)

// FileOperationPatternOptions is a structure.
type FileOperationPatternOptions struct{}

// FileOperationRegistrationOptions is a structure.
type FileOperationRegistrationOptions struct{}

// FileRename is a structure.
type FileRename struct{}

// FileRenameArray is an array of FileRename elements.
type FileRenameArray []FileRename

// FileSystemWatcher is a structure.
type FileSystemWatcher struct{}

// FileSystemWatcherArray is an array of FileSystemWatcher elements.
type FileSystemWatcherArray []FileSystemWatcher

// FoldingRange is a structure.
type FoldingRange struct{}

// FoldingRangeArray is an array of FoldingRange elements.
type FoldingRangeArray []FoldingRange

// FoldingRangeClientCapabilities is a structure.
type FoldingRangeClientCapabilities struct{}

// FoldingRangeClientCapabilitiesFoldingRange is a literal structure.
type FoldingRangeClientCapabilitiesFoldingRange struct{}

// FoldingRangeClientCapabilitiesFoldingRangeKind is a literal structure.
type FoldingRangeClientCapabilitiesFoldingRangeKind struct{}

// FoldingRangeKind is an enumeration of String values.
//
// Documentation from the LSP specification:
//
//	A set of predefined range kinds.
type FoldingRangeKind String

const (
	// CommentFoldingRangeKind is a member of the FoldingRangeKind enumeration.
	//
	// Documentation from the LSP specification:
	//
	//	Folding range for a comment
	CommentFoldingRangeKind FoldingRangeKind = "comment"

	// ImportsFoldingRangeKind is a member of the FoldingRangeKind enumeration.
	//
	// Documentation from the LSP specification:
	//
	//	Folding range for an import or include
	ImportsFoldingRangeKind FoldingRangeKind = "imports"

	// RegionFoldingRangeKind is a member of the FoldingRangeKind enumeration.
	//
	// Documentation from the LSP specification:
	//
	//	Folding range for a region (e.g. `#region`)
	RegionFoldingRangeKind FoldingRangeKind = "region"
)

// FoldingRangeKindArray is an array of FoldingRangeKind elements.
type FoldingRangeKindArray []FoldingRangeKind

// FoldingRangeOptions is a structure.
type FoldingRangeOptions struct{}

// FoldingRangeParams is a structure.
type FoldingRangeParams struct{}

// FoldingRangeRegistrationOptions is a structure.
type FoldingRangeRegistrationOptions struct{}

// FormattingOptions is a structure.
type FormattingOptions struct{}

// FullDocumentDiagnosticReport is a structure.
type FullDocumentDiagnosticReport struct{}

// GeneralClientCapabilities is a structure.
type GeneralClientCapabilities struct{}

// GeneralClientCapabilitiesStaleRequestSupport is a literal structure.
type GeneralClientCapabilitiesStaleRequestSupport struct{}

// GlobPattern is a union of <TODO>.
type GlobPattern interface{}

// Hover is a structure.
type Hover struct{}

// HoverClientCapabilities is a structure.
type HoverClientCapabilities struct{}

// HoverContents is a union of <TODO>.
type HoverContents interface{}

// HoverOptions is a structure.
type HoverOptions struct{}

// HoverParams is a structure.
type HoverParams struct{}

// HoverRegistrationOptions is a structure.
type HoverRegistrationOptions struct{}

// ImplementationClientCapabilities is a structure.
type ImplementationClientCapabilities struct{}

// ImplementationOptions is a structure.
type ImplementationOptions struct{}

// ImplementationParams is a structure.
type ImplementationParams struct{}

// ImplementationRegistrationOptions is a structure.
type ImplementationRegistrationOptions struct{}

// InitializeError is a structure.
type InitializeError struct{}

// InitializeParams is a structure.
type InitializeParams struct{}

// InitializeParamsClientInfo is a literal structure.
type InitializeParamsClientInfo struct{}

// InitializeParamsProcessID is a union of <TODO>.
type InitializeParamsProcessID interface{}

// InitializeParamsRootPath is a union of <TODO>.
type InitializeParamsRootPath interface{}

// InitializeParamsRootURI is a union of <TODO>.
type InitializeParamsRootURI interface{}

// InitializeResult is a structure.
type InitializeResult struct{}

// InitializeResultServerInfo is a literal structure.
type InitializeResultServerInfo struct{}

// InitializedParams is a structure.
type InitializedParams struct{}

// InlayHint is a structure.
type InlayHint struct{}

// InlayHintArray is an array of InlayHint elements.
type InlayHintArray []InlayHint

// InlayHintClientCapabilities is a structure.
type InlayHintClientCapabilities struct{}

// InlayHintClientCapabilitiesResolveSupport is a literal structure.
type InlayHintClientCapabilitiesResolveSupport struct{}

// InlayHintKind is an enumeration of UInt values.
//
// Documentation from the LSP specification:
//
//	Inlay hint kinds.
//
//	@since 3.17.0
type InlayHintKind UInt

const (
	// TypeInlayHintKind is a member of the InlayHintKind enumeration.
	//
	// Documentation from the LSP specification:
	//
	//	An inlay hint that for a type annotation.
	TypeInlayHintKind InlayHintKind = 1

	// ParameterInlayHintKind is a member of the InlayHintKind enumeration.
	//
	// Documentation from the LSP specification:
	//
	//	An inlay hint that is for a parameter.
	ParameterInlayHintKind InlayHintKind = 2
)

// InlayHintLabel is a union of <TODO>.
type InlayHintLabel interface{}

// InlayHintLabelPart is a structure.
type InlayHintLabelPart struct{}

// InlayHintLabelPartArray is an array of InlayHintLabelPart elements.
type InlayHintLabelPartArray []InlayHintLabelPart

// InlayHintLabelPartTooltip is a union of <TODO>.
type InlayHintLabelPartTooltip interface{}

// InlayHintOptions is a structure.
type InlayHintOptions struct{}

// InlayHintParams is a structure.
type InlayHintParams struct{}

// InlayHintRegistrationOptions is a structure.
type InlayHintRegistrationOptions struct{}

// InlayHintTooltip is a union of <TODO>.
type InlayHintTooltip interface{}

// InlayHintWorkspaceClientCapabilities is a structure.
type InlayHintWorkspaceClientCapabilities struct{}

// InlineValue is a union of <TODO>.
type InlineValue interface{}

// InlineValueArray is an array of InlineValue elements.
type InlineValueArray []InlineValue

// InlineValueClientCapabilities is a structure.
type InlineValueClientCapabilities struct{}

// InlineValueContext is a structure.
type InlineValueContext struct{}

// InlineValueEvaluatableExpression is a structure.
type InlineValueEvaluatableExpression struct{}

// InlineValueOptions is a structure.
type InlineValueOptions struct{}

// InlineValueParams is a structure.
type InlineValueParams struct{}

// InlineValueRegistrationOptions is a structure.
type InlineValueRegistrationOptions struct{}

// InlineValueText is a structure.
type InlineValueText struct{}

// InlineValueVariableLookup is a structure.
type InlineValueVariableLookup struct{}

// InlineValueWorkspaceClientCapabilities is a structure.
type InlineValueWorkspaceClientCapabilities struct{}

// InsertReplaceEdit is a structure.
type InsertReplaceEdit struct{}

// InsertTextFormat is an enumeration of UInt values.
//
// Documentation from the LSP specification:
//
//	Defines whether the insert text in a completion item should be interpreted as
//	plain text or a snippet.
type InsertTextFormat UInt

const (
	// PlainTextInsertTextFormat is a member of the InsertTextFormat enumeration.
	//
	// Documentation from the LSP specification:
	//
	//	The primary text to be inserted is treated as a plain string.
	PlainTextInsertTextFormat InsertTextFormat = 1

	// SnippetInsertTextFormat is a member of the InsertTextFormat enumeration.
	//
	// Documentation from the LSP specification:
	//
	//	The primary text to be inserted is treated as a snippet.
	//
	//	A snippet can define tab stops and placeholders with `$1`, `$2`
	//	and `${3:foo}`. `$0` defines the final tab stop, it defaults to
	//	the end of the snippet. Placeholders with equal identifiers are linked,
	//	that is typing in one will update others too.
	//
	//	See also: https://microsoft.github.io/language-server-protocol/specifications/specification-current/#snippet_syntax
	SnippetInsertTextFormat InsertTextFormat = 2
)

// InsertTextMode is an enumeration of UInt values.
//
// Documentation from the LSP specification:
//
//	How whitespace and indentation is handled during completion
//	item insertion.
//
//	@since 3.16.0
type InsertTextMode UInt

const (
	// AsIsInsertTextMode is a member of the InsertTextMode enumeration.
	//
	// Documentation from the LSP specification:
	//
	//	The insertion or replace strings is taken as it is. If the
	//	value is multi line the lines below the cursor will be
	//	inserted using the indentation defined in the string value.
	//	The client will not apply any kind of adjustments to the
	//	string.
	AsIsInsertTextMode InsertTextMode = 1

	// AdjustIndentationInsertTextMode is a member of the InsertTextMode enumeration.
	//
	// Documentation from the LSP specification:
	//
	//	The editor adjusts leading whitespace of new lines so that
	//	they match the indentation up to the cursor of the line for
	//	which the item is accepted.
	//
	//	Consider a line like this: <2tabs><cursor><3tabs>foo. Accepting a
	//	multi line completion item is indented using 2 tabs and all
	//	following lines inserted will be indented using 2 tabs as well.
	AdjustIndentationInsertTextMode InsertTextMode = 2
)

// InsertTextModeArray is an array of InsertTextMode elements.
type InsertTextModeArray []InsertTextMode

// Int is the LSP signed integer type.
type Int int32

// LSPAny is a union of <TODO>.
type LSPAny interface{}

// LSPAnyArray is an array of LSPAny elements.
type LSPAnyArray []LSPAny

// LSPAnyMap is an array of String to LSPAny.
type LSPAnyMap map[String]LSPAny

// LSPErrorCodes is an enumeration of Int values.
type LSPErrorCodes Int

const (
	// RequestFailedLSPErrorCodes is a member of the LSPErrorCodes enumeration.
	//
	// Documentation from the LSP specification:
	//
	//	A request failed but it was syntactically correct, e.g the
	//	method name was known and the parameters were valid. The error
	//	message should contain human readable information about why
	//	the request failed.
	//
	//	@since 3.17.0
	RequestFailedLSPErrorCodes LSPErrorCodes = -32803

	// ServerCancelledLSPErrorCodes is a member of the LSPErrorCodes enumeration.
	//
	// Documentation from the LSP specification:
	//
	//	The server cancelled the request. This error code should
	//	only be used for requests that explicitly support being
	//	server cancellable.
	//
	//	@since 3.17.0
	ServerCancelledLSPErrorCodes LSPErrorCodes = -32802

	// ContentModifiedLSPErrorCodes is a member of the LSPErrorCodes enumeration.
	//
	// Documentation from the LSP specification:
	//
	//	The server detected that the content of a document got
	//	modified outside normal conditions. A server should
	//	NOT send this error code if it detects a content change
	//	in it unprocessed messages. The result even computed
	//	on an older state might still be useful for the client.
	//
	//	If a client decides that a result is not of any use anymore
	//	the client should cancel the request.
	ContentModifiedLSPErrorCodes LSPErrorCodes = -32801

	// RequestCancelledLSPErrorCodes is a member of the LSPErrorCodes enumeration.
	//
	// Documentation from the LSP specification:
	//
	//	The client has canceled a request and a server as detected
	//	the cancel.
	RequestCancelledLSPErrorCodes LSPErrorCodes = -32800
)

// LinkedEditingRangeClientCapabilities is a structure.
type LinkedEditingRangeClientCapabilities struct{}

// LinkedEditingRangeOptions is a structure.
type LinkedEditingRangeOptions struct{}

// LinkedEditingRangeParams is a structure.
type LinkedEditingRangeParams struct{}

// LinkedEditingRangeRegistrationOptions is a structure.
type LinkedEditingRangeRegistrationOptions struct{}

// LinkedEditingRanges is a structure.
type LinkedEditingRanges struct{}

// Location is a structure.
type Location struct{}

// LocationArray is an array of Location elements.
type LocationArray []Location

// LocationLink is a structure.
type LocationLink struct{}

// LogMessageParams is a structure.
type LogMessageParams struct{}

// LogTraceParams is a structure.
type LogTraceParams struct{}

// MarkdownClientCapabilities is a structure.
type MarkdownClientCapabilities struct{}

// MarkedString is a union of <TODO>.
type MarkedString interface{}

// MarkedStringArray is an array of MarkedString elements.
type MarkedStringArray []MarkedString

// MarkedStringOption2 is a literal structure.
type MarkedStringOption2 struct{}

// MarkupContent is a structure.
type MarkupContent struct{}

// MarkupKind is an enumeration of String values.
//
// Documentation from the LSP specification:
//
//	Describes the content type that a client supports in various
//	result literals like `Hover`, `ParameterInfo` or `CompletionItem`.
//
//	Please note that `MarkupKinds` must not start with a `$`. This kinds
//	are reserved for internal usage.
type MarkupKind String

const (
	// PlainTextMarkupKind is a member of the MarkupKind enumeration.
	//
	// Documentation from the LSP specification:
	//
	//	Plain text is supported as a content format
	PlainTextMarkupKind MarkupKind = "plaintext"

	// MarkdownMarkupKind is a member of the MarkupKind enumeration.
	//
	// Documentation from the LSP specification:
	//
	//	Markdown is supported as a content format
	MarkdownMarkupKind MarkupKind = "markdown"
)

// MarkupKindArray is an array of MarkupKind elements.
type MarkupKindArray []MarkupKind

// MessageActionItem is a structure.
type MessageActionItem struct{}

// MessageActionItemArray is an array of MessageActionItem elements.
type MessageActionItemArray []MessageActionItem

// MessageType is an enumeration of UInt values.
//
// Documentation from the LSP specification:
//
//	The message type
type MessageType UInt

const (
	// ErrorMessageType is a member of the MessageType enumeration.
	//
	// Documentation from the LSP specification:
	//
	//	An error message.
	ErrorMessageType MessageType = 1

	// WarningMessageType is a member of the MessageType enumeration.
	//
	// Documentation from the LSP specification:
	//
	//	A warning message.
	WarningMessageType MessageType = 2

	// InfoMessageType is a member of the MessageType enumeration.
	//
	// Documentation from the LSP specification:
	//
	//	An information message.
	InfoMessageType MessageType = 3

	// LogMessageType is a member of the MessageType enumeration.
	//
	// Documentation from the LSP specification:
	//
	//	A log message.
	LogMessageType MessageType = 4
)

// Moniker is a structure.
type Moniker struct{}

// MonikerArray is an array of Moniker elements.
type MonikerArray []Moniker

// MonikerClientCapabilities is a structure.
type MonikerClientCapabilities struct{}

// MonikerKind is an enumeration of String values.
//
// Documentation from the LSP specification:
//
//	The moniker kind.
//
//	@since 3.16.0
type MonikerKind String

const (
	// ImportMonikerKind is a member of the MonikerKind enumeration.
	//
	// Documentation from the LSP specification:
	//
	//	The moniker represent a symbol that is imported into a project
	ImportMonikerKind MonikerKind = "import"

	// ExportMonikerKind is a member of the MonikerKind enumeration.
	//
	// Documentation from the LSP specification:
	//
	//	The moniker represents a symbol that is exported from a project
	ExportMonikerKind MonikerKind = "export"

	// LocalMonikerKind is a member of the MonikerKind enumeration.
	//
	// Documentation from the LSP specification:
	//
	//	The moniker represents a symbol that is local to a project (e.g. a local
	//	variable of a function, a class not visible outside the project, ...)
	LocalMonikerKind MonikerKind = "local"
)

// MonikerOptions is a structure.
type MonikerOptions struct{}

// MonikerParams is a structure.
type MonikerParams struct{}

// MonikerRegistrationOptions is a structure.
type MonikerRegistrationOptions struct{}

// NotebookCell is a structure.
type NotebookCell struct{}

// NotebookCellArray is an array of NotebookCell elements.
type NotebookCellArray []NotebookCell

// NotebookCellArrayChange is a structure.
type NotebookCellArrayChange struct{}

// NotebookCellKind is an enumeration of UInt values.
//
// Documentation from the LSP specification:
//
//	A notebook cell kind.
//
//	@since 3.17.0
type NotebookCellKind UInt

const (
	// MarkupNotebookCellKind is a member of the NotebookCellKind enumeration.
	//
	// Documentation from the LSP specification:
	//
	//	A markup-cell is formatted source that is used for display.
	MarkupNotebookCellKind NotebookCellKind = 1

	// CodeNotebookCellKind is a member of the NotebookCellKind enumeration.
	//
	// Documentation from the LSP specification:
	//
	//	A code-cell is source code.
	CodeNotebookCellKind NotebookCellKind = 2
)

// NotebookCellTextDocumentFilter is a structure.
type NotebookCellTextDocumentFilter struct{}

// NotebookCellTextDocumentFilterNotebook is a union of <TODO>.
type NotebookCellTextDocumentFilterNotebook interface{}

// NotebookDocument is a structure.
type NotebookDocument struct{}

// NotebookDocumentChangeEvent is a structure.
type NotebookDocumentChangeEvent struct{}

// NotebookDocumentChangeEventCells is a literal structure.
type NotebookDocumentChangeEventCells struct{}

// NotebookDocumentChangeEventCellsStructure is a literal structure.
type NotebookDocumentChangeEventCellsStructure struct{}

// NotebookDocumentChangeEventCellsTextContent is a literal structure.
type NotebookDocumentChangeEventCellsTextContent struct{}

// NotebookDocumentChangeEventCellsTextContentArray is an array of NotebookDocumentChangeEventCellsTextContent elements.
type NotebookDocumentChangeEventCellsTextContentArray []NotebookDocumentChangeEventCellsTextContent

// NotebookDocumentClientCapabilities is a structure.
type NotebookDocumentClientCapabilities struct{}

// NotebookDocumentFilter is a union of <TODO>.
type NotebookDocumentFilter interface{}

// NotebookDocumentFilterOption1 is a literal structure.
type NotebookDocumentFilterOption1 struct{}

// NotebookDocumentFilterOption2 is a literal structure.
type NotebookDocumentFilterOption2 struct{}

// NotebookDocumentFilterOption3 is a literal structure.
type NotebookDocumentFilterOption3 struct{}

// NotebookDocumentIdentifier is a structure.
type NotebookDocumentIdentifier struct{}

// NotebookDocumentSyncClientCapabilities is a structure.
type NotebookDocumentSyncClientCapabilities struct{}

// NotebookDocumentSyncOptions is a structure.
type NotebookDocumentSyncOptions struct{}

// NotebookDocumentSyncOptionsNotebookSelector is a union of <TODO>.
type NotebookDocumentSyncOptionsNotebookSelector interface{}

// NotebookDocumentSyncOptionsNotebookSelectorArray is an array of NotebookDocumentSyncOptionsNotebookSelector elements.
type NotebookDocumentSyncOptionsNotebookSelectorArray []NotebookDocumentSyncOptionsNotebookSelector

// NotebookDocumentSyncOptionsNotebookSelectorOption1 is a literal structure.
type NotebookDocumentSyncOptionsNotebookSelectorOption1 struct{}

// NotebookDocumentSyncOptionsNotebookSelectorOption1Cells is a literal structure.
type NotebookDocumentSyncOptionsNotebookSelectorOption1Cells struct{}

// NotebookDocumentSyncOptionsNotebookSelectorOption1CellsArray is an array of NotebookDocumentSyncOptionsNotebookSelectorOption1Cells elements.
type NotebookDocumentSyncOptionsNotebookSelectorOption1CellsArray []NotebookDocumentSyncOptionsNotebookSelectorOption1Cells

// NotebookDocumentSyncOptionsNotebookSelectorOption1Notebook is a union of <TODO>.
type NotebookDocumentSyncOptionsNotebookSelectorOption1Notebook interface{}

// NotebookDocumentSyncOptionsNotebookSelectorOption2 is a literal structure.
type NotebookDocumentSyncOptionsNotebookSelectorOption2 struct{}

// NotebookDocumentSyncOptionsNotebookSelectorOption2Cells is a literal structure.
type NotebookDocumentSyncOptionsNotebookSelectorOption2Cells struct{}

// NotebookDocumentSyncOptionsNotebookSelectorOption2CellsArray is an array of NotebookDocumentSyncOptionsNotebookSelectorOption2Cells elements.
type NotebookDocumentSyncOptionsNotebookSelectorOption2CellsArray []NotebookDocumentSyncOptionsNotebookSelectorOption2Cells

// NotebookDocumentSyncOptionsNotebookSelectorOption2Notebook is a union of <TODO>.
type NotebookDocumentSyncOptionsNotebookSelectorOption2Notebook interface{}

// NotebookDocumentSyncRegistrationOptions is a structure.
type NotebookDocumentSyncRegistrationOptions struct{}

// OptionalVersionedTextDocumentIdentifier is a structure.
type OptionalVersionedTextDocumentIdentifier struct{}

// OptionalVersionedTextDocumentIdentifierVersion is a union of <TODO>.
type OptionalVersionedTextDocumentIdentifierVersion interface{}

// ParameterInformation is a structure.
type ParameterInformation struct{}

// ParameterInformationArray is an array of ParameterInformation elements.
type ParameterInformationArray []ParameterInformation

// ParameterInformationDocumentation is a union of <TODO>.
type ParameterInformationDocumentation interface{}

// ParameterInformationLabel is a union of <TODO>.
type ParameterInformationLabel interface{}

// ParameterInformationLabelOption2 is a 2-tuple.
type ParameterInformationLabelOption2 struct{}

// PartialResult is a union of <TODO>.
type PartialResult interface{}

// PartialResultArray is an array of PartialResult elements.
type PartialResultArray []PartialResult

// PartialResultParams is a structure.
type PartialResultParams struct{}

// Pattern is an alias for String.
type Pattern = String

// Position is a structure.
type Position struct{}

// PositionArray is an array of Position elements.
type PositionArray []Position

// PositionEncodingKind is an enumeration of String values.
//
// Documentation from the LSP specification:
//
//	A set of predefined position encoding kinds.
//
//	@since 3.17.0
type PositionEncodingKind String

const (
	// UTF8PositionEncodingKind is a member of the PositionEncodingKind enumeration.
	//
	// Documentation from the LSP specification:
	//
	//	Character offsets count UTF-8 code units (e.g. bytes).
	UTF8PositionEncodingKind PositionEncodingKind = "utf-8"

	// UTF16PositionEncodingKind is a member of the PositionEncodingKind enumeration.
	//
	// Documentation from the LSP specification:
	//
	//	Character offsets count UTF-16 code units.
	//
	//	This is the default and must always be supported
	//	by servers
	UTF16PositionEncodingKind PositionEncodingKind = "utf-16"

	// UTF32PositionEncodingKind is a member of the PositionEncodingKind enumeration.
	//
	// Documentation from the LSP specification:
	//
	//	Character offsets count UTF-32 code units.
	//
	//	Implementation note: these are the same as Unicode codepoints,
	//	so this `PositionEncodingKind` may also be used for an
	//	encoding-agnostic representation of character offsets.
	UTF32PositionEncodingKind PositionEncodingKind = "utf-32"
)

// PositionEncodingKindArray is an array of PositionEncodingKind elements.
type PositionEncodingKindArray []PositionEncodingKind

// PrepareRenameParams is a structure.
type PrepareRenameParams struct{}

// PrepareRenameResult is a union of <TODO>.
type PrepareRenameResult interface{}

// PrepareRenameResultOption2 is a literal structure.
type PrepareRenameResultOption2 struct{}

// PrepareRenameResultOption3 is a literal structure.
type PrepareRenameResultOption3 struct{}

// PrepareSupportDefaultBehavior is an enumeration of UInt values.
type PrepareSupportDefaultBehavior UInt

const (
	// IdentifierPrepareSupportDefaultBehavior is a member of the PrepareSupportDefaultBehavior enumeration.
	//
	// Documentation from the LSP specification:
	//
	//	The client's default behavior is to select the identifier
	//	according the to language's syntax rule.
	IdentifierPrepareSupportDefaultBehavior PrepareSupportDefaultBehavior = 1
)

// PreviousResultIDArray is an array of PreviousResultID elements.
type PreviousResultIDArray []PreviousResultID

// PreviousResultID is a structure.
type PreviousResultID struct{}

// ProgressParams is a structure.
type ProgressParams struct{}

// ProgressToken is a union of <TODO>.
type ProgressToken interface{}

// PublishDiagnosticsClientCapabilities is a structure.
type PublishDiagnosticsClientCapabilities struct{}

// PublishDiagnosticsClientCapabilitiesTagSupport is a literal structure.
type PublishDiagnosticsClientCapabilitiesTagSupport struct{}

// PublishDiagnosticsParams is a structure.
type PublishDiagnosticsParams struct{}

// Range is a structure.
type Range struct{}

// RangeArray is an array of Range elements.
type RangeArray []Range

// ReferenceClientCapabilities is a structure.
type ReferenceClientCapabilities struct{}

// ReferenceContext is a structure.
type ReferenceContext struct{}

// ReferenceOptions is a structure.
type ReferenceOptions struct{}

// ReferenceParams is a structure.
type ReferenceParams struct{}

// ReferenceRegistrationOptions is a structure.
type ReferenceRegistrationOptions struct{}

// Registration is a structure.
type Registration struct{}

// RegistrationArray is an array of Registration elements.
type RegistrationArray []Registration

// RegistrationOptions is the intersection of several types.
type RegistrationOptions struct{}

// RegistrationParams is a structure.
type RegistrationParams struct{}

// RegularExpressionsClientCapabilities is a structure.
type RegularExpressionsClientCapabilities struct{}

// RelatedFullDocumentDiagnosticReport is a structure.
type RelatedFullDocumentDiagnosticReport struct{}

// RelatedFullDocumentDiagnosticReportRelatedDocuments is a union of <TODO>.
type RelatedFullDocumentDiagnosticReportRelatedDocuments interface{}

// RelatedFullDocumentDiagnosticReportRelatedDocumentsMap is an array of DocumentURI to RelatedFullDocumentDiagnosticReportRelatedDocuments.
type RelatedFullDocumentDiagnosticReportRelatedDocumentsMap map[DocumentURI]RelatedFullDocumentDiagnosticReportRelatedDocuments

// RelatedUnchangedDocumentDiagnosticReport is a structure.
type RelatedUnchangedDocumentDiagnosticReport struct{}

// RelatedUnchangedDocumentDiagnosticReportRelatedDocuments is a union of <TODO>.
type RelatedUnchangedDocumentDiagnosticReportRelatedDocuments interface{}

// RelatedUnchangedDocumentDiagnosticReportRelatedDocumentsMap is an array of DocumentURI to RelatedUnchangedDocumentDiagnosticReportRelatedDocuments.
type RelatedUnchangedDocumentDiagnosticReportRelatedDocumentsMap map[DocumentURI]RelatedUnchangedDocumentDiagnosticReportRelatedDocuments

// RelativePattern is a structure.
type RelativePattern struct{}

// RelativePatternBaseURI is a union of <TODO>.
type RelativePatternBaseURI interface{}

// RenameClientCapabilities is a structure.
type RenameClientCapabilities struct{}

// RenameFile is a structure.
type RenameFile struct{}

// RenameFileOptions is a structure.
type RenameFileOptions struct{}

// RenameFilesParams is a structure.
type RenameFilesParams struct{}

// RenameOptions is a structure.
type RenameOptions struct{}

// RenameParams is a structure.
type RenameParams struct{}

// RenameRegistrationOptions is a structure.
type RenameRegistrationOptions struct{}

// ResourceOperation is a structure.
type ResourceOperation struct{}

// ResourceOperationKind is an enumeration of String values.
type ResourceOperationKind String

const (
	// CreateResourceOperationKind is a member of the ResourceOperationKind enumeration.
	//
	// Documentation from the LSP specification:
	//
	//	Supports creating new files and folders.
	CreateResourceOperationKind ResourceOperationKind = "create"

	// RenameResourceOperationKind is a member of the ResourceOperationKind enumeration.
	//
	// Documentation from the LSP specification:
	//
	//	Supports renaming existing files and folders.
	RenameResourceOperationKind ResourceOperationKind = "rename"

	// DeleteResourceOperationKind is a member of the ResourceOperationKind enumeration.
	//
	// Documentation from the LSP specification:
	//
	//	Supports deleting existing files and folders.
	DeleteResourceOperationKind ResourceOperationKind = "delete"
)

// ResourceOperationKindArray is an array of ResourceOperationKind elements.
type ResourceOperationKindArray []ResourceOperationKind

// Result is a union of <TODO>.
type Result interface{}

// ResultOption1 is a union of <TODO>.
type ResultOption1 interface{}

// ResultOption1Array is an array of ResultOption1 elements.
type ResultOption1Array []ResultOption1

// SaveOptions is a structure.
type SaveOptions struct{}

// SelectionRange is a structure.
type SelectionRange struct{}

// SelectionRangeArray is an array of SelectionRange elements.
type SelectionRangeArray []SelectionRange

// SelectionRangeClientCapabilities is a structure.
type SelectionRangeClientCapabilities struct{}

// SelectionRangeOptions is a structure.
type SelectionRangeOptions struct{}

// SelectionRangeParams is a structure.
type SelectionRangeParams struct{}

// SelectionRangeRegistrationOptions is a structure.
type SelectionRangeRegistrationOptions struct{}

// SemanticTokenModifiers is an enumeration of String values.
//
// Documentation from the LSP specification:
//
//	A set of predefined token modifiers. This set is not fixed
//	an clients can specify additional token types via the
//	corresponding client capabilities.
//
//	@since 3.16.0
type SemanticTokenModifiers String

const (
	// DeclarationSemanticTokenModifiers is a member of the SemanticTokenModifiers enumeration.
	DeclarationSemanticTokenModifiers SemanticTokenModifiers = "declaration"

	// DefinitionSemanticTokenModifiers is a member of the SemanticTokenModifiers enumeration.
	DefinitionSemanticTokenModifiers SemanticTokenModifiers = "definition"

	// ReadonlySemanticTokenModifiers is a member of the SemanticTokenModifiers enumeration.
	ReadonlySemanticTokenModifiers SemanticTokenModifiers = "readonly"

	// StaticSemanticTokenModifiers is a member of the SemanticTokenModifiers enumeration.
	StaticSemanticTokenModifiers SemanticTokenModifiers = "static"

	// DeprecatedSemanticTokenModifiers is a member of the SemanticTokenModifiers enumeration.
	DeprecatedSemanticTokenModifiers SemanticTokenModifiers = "deprecated"

	// AbstractSemanticTokenModifiers is a member of the SemanticTokenModifiers enumeration.
	AbstractSemanticTokenModifiers SemanticTokenModifiers = "abstract"

	// AsyncSemanticTokenModifiers is a member of the SemanticTokenModifiers enumeration.
	AsyncSemanticTokenModifiers SemanticTokenModifiers = "async"

	// ModificationSemanticTokenModifiers is a member of the SemanticTokenModifiers enumeration.
	ModificationSemanticTokenModifiers SemanticTokenModifiers = "modification"

	// DocumentationSemanticTokenModifiers is a member of the SemanticTokenModifiers enumeration.
	DocumentationSemanticTokenModifiers SemanticTokenModifiers = "documentation"

	// DefaultLibrarySemanticTokenModifiers is a member of the SemanticTokenModifiers enumeration.
	DefaultLibrarySemanticTokenModifiers SemanticTokenModifiers = "defaultLibrary"
)

// SemanticTokenTypes is an enumeration of String values.
//
// Documentation from the LSP specification:
//
//	A set of predefined token types. This set is not fixed
//	an clients can specify additional token types via the
//	corresponding client capabilities.
//
//	@since 3.16.0
type SemanticTokenTypes String

const (
	// NamespaceSemanticTokenTypes is a member of the SemanticTokenTypes enumeration.
	NamespaceSemanticTokenTypes SemanticTokenTypes = "namespace"

	// TypeSemanticTokenTypes is a member of the SemanticTokenTypes enumeration.
	//
	// Documentation from the LSP specification:
	//
	//	Represents a generic type. Acts as a fallback for types which can't be mapped to
	//	a specific type like class or enum.
	TypeSemanticTokenTypes SemanticTokenTypes = "type"

	// ClassSemanticTokenTypes is a member of the SemanticTokenTypes enumeration.
	ClassSemanticTokenTypes SemanticTokenTypes = "class"

	// EnumSemanticTokenTypes is a member of the SemanticTokenTypes enumeration.
	EnumSemanticTokenTypes SemanticTokenTypes = "enum"

	// InterfaceSemanticTokenTypes is a member of the SemanticTokenTypes enumeration.
	InterfaceSemanticTokenTypes SemanticTokenTypes = "interface"

	// StructSemanticTokenTypes is a member of the SemanticTokenTypes enumeration.
	StructSemanticTokenTypes SemanticTokenTypes = "struct"

	// TypeParameterSemanticTokenTypes is a member of the SemanticTokenTypes enumeration.
	TypeParameterSemanticTokenTypes SemanticTokenTypes = "typeParameter"

	// ParameterSemanticTokenTypes is a member of the SemanticTokenTypes enumeration.
	ParameterSemanticTokenTypes SemanticTokenTypes = "parameter"

	// VariableSemanticTokenTypes is a member of the SemanticTokenTypes enumeration.
	VariableSemanticTokenTypes SemanticTokenTypes = "variable"

	// PropertySemanticTokenTypes is a member of the SemanticTokenTypes enumeration.
	PropertySemanticTokenTypes SemanticTokenTypes = "property"

	// EnumMemberSemanticTokenTypes is a member of the SemanticTokenTypes enumeration.
	EnumMemberSemanticTokenTypes SemanticTokenTypes = "enumMember"

	// EventSemanticTokenTypes is a member of the SemanticTokenTypes enumeration.
	EventSemanticTokenTypes SemanticTokenTypes = "event"

	// FunctionSemanticTokenTypes is a member of the SemanticTokenTypes enumeration.
	FunctionSemanticTokenTypes SemanticTokenTypes = "function"

	// MethodSemanticTokenTypes is a member of the SemanticTokenTypes enumeration.
	MethodSemanticTokenTypes SemanticTokenTypes = "method"

	// MacroSemanticTokenTypes is a member of the SemanticTokenTypes enumeration.
	MacroSemanticTokenTypes SemanticTokenTypes = "macro"

	// KeywordSemanticTokenTypes is a member of the SemanticTokenTypes enumeration.
	KeywordSemanticTokenTypes SemanticTokenTypes = "keyword"

	// ModifierSemanticTokenTypes is a member of the SemanticTokenTypes enumeration.
	ModifierSemanticTokenTypes SemanticTokenTypes = "modifier"

	// CommentSemanticTokenTypes is a member of the SemanticTokenTypes enumeration.
	CommentSemanticTokenTypes SemanticTokenTypes = "comment"

	// StringSemanticTokenTypes is a member of the SemanticTokenTypes enumeration.
	StringSemanticTokenTypes SemanticTokenTypes = "string"

	// NumberSemanticTokenTypes is a member of the SemanticTokenTypes enumeration.
	NumberSemanticTokenTypes SemanticTokenTypes = "number"

	// RegexpSemanticTokenTypes is a member of the SemanticTokenTypes enumeration.
	RegexpSemanticTokenTypes SemanticTokenTypes = "regexp"

	// OperatorSemanticTokenTypes is a member of the SemanticTokenTypes enumeration.
	OperatorSemanticTokenTypes SemanticTokenTypes = "operator"

	// DecoratorSemanticTokenTypes is a member of the SemanticTokenTypes enumeration.
	//
	// Documentation from the LSP specification:
	//
	//	@since 3.17.0
	DecoratorSemanticTokenTypes SemanticTokenTypes = "decorator"
)

// SemanticTokens is a structure.
type SemanticTokens struct{}

// SemanticTokensClientCapabilities is a structure.
type SemanticTokensClientCapabilities struct{}

// SemanticTokensClientCapabilitiesRequests is a literal structure.
type SemanticTokensClientCapabilitiesRequests struct{}

// SemanticTokensClientCapabilitiesRequestsFull is a union of <TODO>.
type SemanticTokensClientCapabilitiesRequestsFull interface{}

// SemanticTokensClientCapabilitiesRequestsFullOption2 is a literal structure.
type SemanticTokensClientCapabilitiesRequestsFullOption2 struct{}

// SemanticTokensClientCapabilitiesRequestsRange is a union of <TODO>.
type SemanticTokensClientCapabilitiesRequestsRange interface{}

// SemanticTokensClientCapabilitiesRequestsRangeOption2 is a literal structure.
type SemanticTokensClientCapabilitiesRequestsRangeOption2 struct{}

// SemanticTokensDelta is a structure.
type SemanticTokensDelta struct{}

// SemanticTokensDeltaParams is a structure.
type SemanticTokensDeltaParams struct{}

// SemanticTokensDeltaPartialResult is a structure.
type SemanticTokensDeltaPartialResult struct{}

// SemanticTokensEdit is a structure.
type SemanticTokensEdit struct{}

// SemanticTokensEditArray is an array of SemanticTokensEdit elements.
type SemanticTokensEditArray []SemanticTokensEdit

// SemanticTokensLegend is a structure.
type SemanticTokensLegend struct{}

// SemanticTokensOptions is a structure.
type SemanticTokensOptions struct{}

// SemanticTokensOptionsFull is a union of <TODO>.
type SemanticTokensOptionsFull interface{}

// SemanticTokensOptionsFullOption2 is a literal structure.
type SemanticTokensOptionsFullOption2 struct{}

// SemanticTokensOptionsRange is a union of <TODO>.
type SemanticTokensOptionsRange interface{}

// SemanticTokensOptionsRangeOption2 is a literal structure.
type SemanticTokensOptionsRangeOption2 struct{}

// SemanticTokensParams is a structure.
type SemanticTokensParams struct{}

// SemanticTokensPartialResult is a structure.
type SemanticTokensPartialResult struct{}

// SemanticTokensRangeParams is a structure.
type SemanticTokensRangeParams struct{}

// SemanticTokensRegistrationOptions is a structure.
type SemanticTokensRegistrationOptions struct{}

// SemanticTokensWorkspaceClientCapabilities is a structure.
type SemanticTokensWorkspaceClientCapabilities struct{}

// ServerCapabilities is a structure.
type ServerCapabilities struct{}

// ServerCapabilitiesCallHierarchyProvider is a union of <TODO>.
type ServerCapabilitiesCallHierarchyProvider interface{}

// ServerCapabilitiesCodeActionProvider is a union of <TODO>.
type ServerCapabilitiesCodeActionProvider interface{}

// ServerCapabilitiesColorProvider is a union of <TODO>.
type ServerCapabilitiesColorProvider interface{}

// ServerCapabilitiesDeclarationProvider is a union of <TODO>.
type ServerCapabilitiesDeclarationProvider interface{}

// ServerCapabilitiesDefinitionProvider is a union of <TODO>.
type ServerCapabilitiesDefinitionProvider interface{}

// ServerCapabilitiesDiagnosticProvider is a union of <TODO>.
type ServerCapabilitiesDiagnosticProvider interface{}

// ServerCapabilitiesDocumentFormattingProvider is a union of <TODO>.
type ServerCapabilitiesDocumentFormattingProvider interface{}

// ServerCapabilitiesDocumentHighlightProvider is a union of <TODO>.
type ServerCapabilitiesDocumentHighlightProvider interface{}

// ServerCapabilitiesDocumentRangeFormattingProvider is a union of <TODO>.
type ServerCapabilitiesDocumentRangeFormattingProvider interface{}

// ServerCapabilitiesDocumentSymbolProvider is a union of <TODO>.
type ServerCapabilitiesDocumentSymbolProvider interface{}

// ServerCapabilitiesFoldingRangeProvider is a union of <TODO>.
type ServerCapabilitiesFoldingRangeProvider interface{}

// ServerCapabilitiesHoverProvider is a union of <TODO>.
type ServerCapabilitiesHoverProvider interface{}

// ServerCapabilitiesImplementationProvider is a union of <TODO>.
type ServerCapabilitiesImplementationProvider interface{}

// ServerCapabilitiesInlayHintProvider is a union of <TODO>.
type ServerCapabilitiesInlayHintProvider interface{}

// ServerCapabilitiesInlineValueProvider is a union of <TODO>.
type ServerCapabilitiesInlineValueProvider interface{}

// ServerCapabilitiesLinkedEditingRangeProvider is a union of <TODO>.
type ServerCapabilitiesLinkedEditingRangeProvider interface{}

// ServerCapabilitiesMonikerProvider is a union of <TODO>.
type ServerCapabilitiesMonikerProvider interface{}

// ServerCapabilitiesNotebookDocumentSync is a union of <TODO>.
type ServerCapabilitiesNotebookDocumentSync interface{}

// ServerCapabilitiesReferencesProvider is a union of <TODO>.
type ServerCapabilitiesReferencesProvider interface{}

// ServerCapabilitiesRenameProvider is a union of <TODO>.
type ServerCapabilitiesRenameProvider interface{}

// ServerCapabilitiesSelectionRangeProvider is a union of <TODO>.
type ServerCapabilitiesSelectionRangeProvider interface{}

// ServerCapabilitiesSemanticTokensProvider is a union of <TODO>.
type ServerCapabilitiesSemanticTokensProvider interface{}

// ServerCapabilitiesTextDocumentSync is a union of <TODO>.
type ServerCapabilitiesTextDocumentSync interface{}

// ServerCapabilitiesTypeDefinitionProvider is a union of <TODO>.
type ServerCapabilitiesTypeDefinitionProvider interface{}

// ServerCapabilitiesTypeHierarchyProvider is a union of <TODO>.
type ServerCapabilitiesTypeHierarchyProvider interface{}

// ServerCapabilitiesWorkspace is a literal structure.
type ServerCapabilitiesWorkspace struct{}

// ServerCapabilitiesWorkspaceSymbolProvider is a union of <TODO>.
type ServerCapabilitiesWorkspaceSymbolProvider interface{}

// SetTraceParams is a structure.
type SetTraceParams struct{}

// ShowDocumentClientCapabilities is a structure.
type ShowDocumentClientCapabilities struct{}

// ShowDocumentParams is a structure.
type ShowDocumentParams struct{}

// ShowDocumentResult is a structure.
type ShowDocumentResult struct{}

// ShowMessageParams is a structure.
type ShowMessageParams struct{}

// ShowMessageRequestClientCapabilities is a structure.
type ShowMessageRequestClientCapabilities struct{}

// ShowMessageRequestClientCapabilitiesMessageActionItem is a literal structure.
type ShowMessageRequestClientCapabilitiesMessageActionItem struct{}

// ShowMessageRequestParams is a structure.
type ShowMessageRequestParams struct{}

// SignatureHelp is a structure.
type SignatureHelp struct{}

// SignatureHelpClientCapabilities is a structure.
type SignatureHelpClientCapabilities struct{}

// SignatureHelpClientCapabilitiesSignatureInformation is a literal structure.
type SignatureHelpClientCapabilitiesSignatureInformation struct{}

// SignatureHelpClientCapabilitiesSignatureInformationParameterInformation is a literal structure.
type SignatureHelpClientCapabilitiesSignatureInformationParameterInformation struct{}

// SignatureHelpContext is a structure.
type SignatureHelpContext struct{}

// SignatureHelpOptions is a structure.
type SignatureHelpOptions struct{}

// SignatureHelpParams is a structure.
type SignatureHelpParams struct{}

// SignatureHelpRegistrationOptions is a structure.
type SignatureHelpRegistrationOptions struct{}

// SignatureHelpTriggerKind is an enumeration of UInt values.
//
// Documentation from the LSP specification:
//
//	How a signature help was triggered.
//
//	@since 3.15.0
type SignatureHelpTriggerKind UInt

const (
	// InvokedSignatureHelpTriggerKind is a member of the SignatureHelpTriggerKind enumeration.
	//
	// Documentation from the LSP specification:
	//
	//	Signature help was invoked manually by the user or by a command.
	InvokedSignatureHelpTriggerKind SignatureHelpTriggerKind = 1

	// TriggerCharacterSignatureHelpTriggerKind is a member of the SignatureHelpTriggerKind enumeration.
	//
	// Documentation from the LSP specification:
	//
	//	Signature help was triggered by a trigger character.
	TriggerCharacterSignatureHelpTriggerKind SignatureHelpTriggerKind = 2

	// ContentChangeSignatureHelpTriggerKind is a member of the SignatureHelpTriggerKind enumeration.
	//
	// Documentation from the LSP specification:
	//
	//	Signature help was triggered by the cursor moving or by the document content changing.
	ContentChangeSignatureHelpTriggerKind SignatureHelpTriggerKind = 3
)

// SignatureInformation is a structure.
type SignatureInformation struct{}

// SignatureInformationArray is an array of SignatureInformation elements.
type SignatureInformationArray []SignatureInformation

// SignatureInformationDocumentation is a union of <TODO>.
type SignatureInformationDocumentation interface{}

// StaticRegistrationOptions is a structure.
type StaticRegistrationOptions struct{}

// String is the LSP string type.
type String string

// StringArray is an array of String elements.
type StringArray []String

// SymbolInformation is a structure.
type SymbolInformation struct{}

// SymbolInformationArray is an array of SymbolInformation elements.
type SymbolInformationArray []SymbolInformation

// SymbolKind is an enumeration of UInt values.
//
// Documentation from the LSP specification:
//
//	A symbol kind.
type SymbolKind UInt

const (
	// FileSymbolKind is a member of the SymbolKind enumeration.
	FileSymbolKind SymbolKind = 1

	// ModuleSymbolKind is a member of the SymbolKind enumeration.
	ModuleSymbolKind SymbolKind = 2

	// NamespaceSymbolKind is a member of the SymbolKind enumeration.
	NamespaceSymbolKind SymbolKind = 3

	// PackageSymbolKind is a member of the SymbolKind enumeration.
	PackageSymbolKind SymbolKind = 4

	// ClassSymbolKind is a member of the SymbolKind enumeration.
	ClassSymbolKind SymbolKind = 5

	// MethodSymbolKind is a member of the SymbolKind enumeration.
	MethodSymbolKind SymbolKind = 6

	// PropertySymbolKind is a member of the SymbolKind enumeration.
	PropertySymbolKind SymbolKind = 7

	// FieldSymbolKind is a member of the SymbolKind enumeration.
	FieldSymbolKind SymbolKind = 8

	// ConstructorSymbolKind is a member of the SymbolKind enumeration.
	ConstructorSymbolKind SymbolKind = 9

	// EnumSymbolKind is a member of the SymbolKind enumeration.
	EnumSymbolKind SymbolKind = 10

	// InterfaceSymbolKind is a member of the SymbolKind enumeration.
	InterfaceSymbolKind SymbolKind = 11

	// FunctionSymbolKind is a member of the SymbolKind enumeration.
	FunctionSymbolKind SymbolKind = 12

	// VariableSymbolKind is a member of the SymbolKind enumeration.
	VariableSymbolKind SymbolKind = 13

	// ConstantSymbolKind is a member of the SymbolKind enumeration.
	ConstantSymbolKind SymbolKind = 14

	// StringSymbolKind is a member of the SymbolKind enumeration.
	StringSymbolKind SymbolKind = 15

	// NumberSymbolKind is a member of the SymbolKind enumeration.
	NumberSymbolKind SymbolKind = 16

	// BooleanSymbolKind is a member of the SymbolKind enumeration.
	BooleanSymbolKind SymbolKind = 17

	// ArraySymbolKind is a member of the SymbolKind enumeration.
	ArraySymbolKind SymbolKind = 18

	// ObjectSymbolKind is a member of the SymbolKind enumeration.
	ObjectSymbolKind SymbolKind = 19

	// KeySymbolKind is a member of the SymbolKind enumeration.
	KeySymbolKind SymbolKind = 20

	// NullSymbolKind is a member of the SymbolKind enumeration.
	NullSymbolKind SymbolKind = 21

	// EnumMemberSymbolKind is a member of the SymbolKind enumeration.
	EnumMemberSymbolKind SymbolKind = 22

	// StructSymbolKind is a member of the SymbolKind enumeration.
	StructSymbolKind SymbolKind = 23

	// EventSymbolKind is a member of the SymbolKind enumeration.
	EventSymbolKind SymbolKind = 24

	// OperatorSymbolKind is a member of the SymbolKind enumeration.
	OperatorSymbolKind SymbolKind = 25

	// TypeParameterSymbolKind is a member of the SymbolKind enumeration.
	TypeParameterSymbolKind SymbolKind = 26
)

// SymbolKindArray is an array of SymbolKind elements.
type SymbolKindArray []SymbolKind

// SymbolTag is an enumeration of UInt values.
//
// Documentation from the LSP specification:
//
//	Symbol tags are extra annotations that tweak the rendering of a symbol.
//
//	@since 3.16
type SymbolTag UInt

const (
	// DeprecatedSymbolTag is a member of the SymbolTag enumeration.
	//
	// Documentation from the LSP specification:
	//
	//	Render a symbol as obsolete, usually using a strike-out.
	DeprecatedSymbolTag SymbolTag = 1
)

// SymbolTagArray is an array of SymbolTag elements.
type SymbolTagArray []SymbolTag

// TextDocumentChangeRegistrationOptions is a structure.
type TextDocumentChangeRegistrationOptions struct{}

// TextDocumentClientCapabilities is a structure.
type TextDocumentClientCapabilities struct{}

// TextDocumentContentChangeEvent is a union of <TODO>.
type TextDocumentContentChangeEvent interface{}

// TextDocumentContentChangeEventArray is an array of TextDocumentContentChangeEvent elements.
type TextDocumentContentChangeEventArray []TextDocumentContentChangeEvent

// TextDocumentContentChangeEventOption1 is a literal structure.
type TextDocumentContentChangeEventOption1 struct{}

// TextDocumentContentChangeEventOption2 is a literal structure.
type TextDocumentContentChangeEventOption2 struct{}

// TextDocumentEdit is a structure.
type TextDocumentEdit struct{}

// TextDocumentEditEdits is a union of <TODO>.
type TextDocumentEditEdits interface{}

// TextDocumentEditEditsArray is an array of TextDocumentEditEdits elements.
type TextDocumentEditEditsArray []TextDocumentEditEdits

// TextDocumentFilter is a union of <TODO>.
type TextDocumentFilter interface{}

// TextDocumentFilterOption1 is a literal structure.
type TextDocumentFilterOption1 struct{}

// TextDocumentFilterOption2 is a literal structure.
type TextDocumentFilterOption2 struct{}

// TextDocumentFilterOption3 is a literal structure.
type TextDocumentFilterOption3 struct{}

// TextDocumentIdentifier is a structure.
type TextDocumentIdentifier struct{}

// TextDocumentIdentifierArray is an array of TextDocumentIdentifier elements.
type TextDocumentIdentifierArray []TextDocumentIdentifier

// TextDocumentItem is a structure.
type TextDocumentItem struct{}

// TextDocumentItemArray is an array of TextDocumentItem elements.
type TextDocumentItemArray []TextDocumentItem

// TextDocumentPositionParams is a structure.
type TextDocumentPositionParams struct{}

// TextDocumentRegistrationOptions is a structure.
type TextDocumentRegistrationOptions struct{}

// TextDocumentRegistrationOptionsDocumentSelector is a union of <TODO>.
type TextDocumentRegistrationOptionsDocumentSelector interface{}

// TextDocumentSaveReason is an enumeration of UInt values.
//
// Documentation from the LSP specification:
//
//	Represents reasons why a text document is saved.
type TextDocumentSaveReason UInt

const (
	// ManualTextDocumentSaveReason is a member of the TextDocumentSaveReason enumeration.
	//
	// Documentation from the LSP specification:
	//
	//	Manually triggered, e.g. by the user pressing save, by starting debugging,
	//	or by an API call.
	ManualTextDocumentSaveReason TextDocumentSaveReason = 1

	// AfterDelayTextDocumentSaveReason is a member of the TextDocumentSaveReason enumeration.
	//
	// Documentation from the LSP specification:
	//
	//	Automatic after a delay.
	AfterDelayTextDocumentSaveReason TextDocumentSaveReason = 2

	// FocusOutTextDocumentSaveReason is a member of the TextDocumentSaveReason enumeration.
	//
	// Documentation from the LSP specification:
	//
	//	When the editor lost focus.
	FocusOutTextDocumentSaveReason TextDocumentSaveReason = 3
)

// TextDocumentSaveRegistrationOptions is a structure.
type TextDocumentSaveRegistrationOptions struct{}

// TextDocumentSyncClientCapabilities is a structure.
type TextDocumentSyncClientCapabilities struct{}

// TextDocumentSyncKind is an enumeration of UInt values.
//
// Documentation from the LSP specification:
//
//	Defines how the host (editor) should sync
//	document changes to the language server.
type TextDocumentSyncKind UInt

const (
	// NoneTextDocumentSyncKind is a member of the TextDocumentSyncKind enumeration.
	//
	// Documentation from the LSP specification:
	//
	//	Documents should not be synced at all.
	NoneTextDocumentSyncKind TextDocumentSyncKind = 0

	// FullTextDocumentSyncKind is a member of the TextDocumentSyncKind enumeration.
	//
	// Documentation from the LSP specification:
	//
	//	Documents are synced by always sending the full content
	//	of the document.
	FullTextDocumentSyncKind TextDocumentSyncKind = 1

	// IncrementalTextDocumentSyncKind is a member of the TextDocumentSyncKind enumeration.
	//
	// Documentation from the LSP specification:
	//
	//	Documents are synced by sending the full content on open.
	//	After that only incremental updates to the document are
	//	send.
	IncrementalTextDocumentSyncKind TextDocumentSyncKind = 2
)

// TextDocumentSyncOptions is a structure.
type TextDocumentSyncOptions struct{}

// TextDocumentSyncOptionsSave is a union of <TODO>.
type TextDocumentSyncOptionsSave interface{}

// TextEdit is a structure.
type TextEdit struct{}

// TextEditArray is an array of TextEdit elements.
type TextEditArray []TextEdit

// TextEditArrayMap is an array of DocumentURI to TextEditArray.
type TextEditArrayMap map[DocumentURI]TextEditArray

// TokenFormat is an enumeration of String values.
type TokenFormat String

const (
	// RelativeTokenFormat is a member of the TokenFormat enumeration.
	RelativeTokenFormat TokenFormat = "relative"
)

// TokenFormatArray is an array of TokenFormat elements.
type TokenFormatArray []TokenFormat

// TraceValues is an enumeration of String values.
type TraceValues String

const (
	// OffTraceValues is a member of the TraceValues enumeration.
	//
	// Documentation from the LSP specification:
	//
	//	Turn tracing off.
	OffTraceValues TraceValues = "off"

	// MessagesTraceValues is a member of the TraceValues enumeration.
	//
	// Documentation from the LSP specification:
	//
	//	Trace messages only.
	MessagesTraceValues TraceValues = "messages"

	// VerboseTraceValues is a member of the TraceValues enumeration.
	//
	// Documentation from the LSP specification:
	//
	//	Verbose message tracing.
	VerboseTraceValues TraceValues = "verbose"
)

// TypeDefinitionClientCapabilities is a structure.
type TypeDefinitionClientCapabilities struct{}

// TypeDefinitionOptions is a structure.
type TypeDefinitionOptions struct{}

// TypeDefinitionParams is a structure.
type TypeDefinitionParams struct{}

// TypeDefinitionRegistrationOptions is a structure.
type TypeDefinitionRegistrationOptions struct{}

// TypeHierarchyClientCapabilities is a structure.
type TypeHierarchyClientCapabilities struct{}

// TypeHierarchyItem is a structure.
type TypeHierarchyItem struct{}

// TypeHierarchyItemArray is an array of TypeHierarchyItem elements.
type TypeHierarchyItemArray []TypeHierarchyItem

// TypeHierarchyOptions is a structure.
type TypeHierarchyOptions struct{}

// TypeHierarchyPrepareParams is a structure.
type TypeHierarchyPrepareParams struct{}

// TypeHierarchyRegistrationOptions is a structure.
type TypeHierarchyRegistrationOptions struct{}

// TypeHierarchySubtypesParams is a structure.
type TypeHierarchySubtypesParams struct{}

// TypeHierarchySupertypesParams is a structure.
type TypeHierarchySupertypesParams struct{}

// UInt is the LSP unsigned integer type.
type UInt uint32

// UIntArray is an array of UInt elements.
type UIntArray []UInt

// URI is the URI of some non-document resource.
type URI url.URL

// UnchangedDocumentDiagnosticReport is a structure.
type UnchangedDocumentDiagnosticReport struct{}

// UniquenessLevel is an enumeration of String values.
//
// Documentation from the LSP specification:
//
//	Moniker uniqueness level to define scope of the moniker.
//
//	@since 3.16.0
type UniquenessLevel String

const (
	// DocumentUniquenessLevel is a member of the UniquenessLevel enumeration.
	//
	// Documentation from the LSP specification:
	//
	//	The moniker is only unique inside a document
	DocumentUniquenessLevel UniquenessLevel = "document"

	// ProjectUniquenessLevel is a member of the UniquenessLevel enumeration.
	//
	// Documentation from the LSP specification:
	//
	//	The moniker is unique inside a project for which a dump got created
	ProjectUniquenessLevel UniquenessLevel = "project"

	// GroupUniquenessLevel is a member of the UniquenessLevel enumeration.
	//
	// Documentation from the LSP specification:
	//
	//	The moniker is unique inside the group to which a project belongs
	GroupUniquenessLevel UniquenessLevel = "group"

	// SchemeUniquenessLevel is a member of the UniquenessLevel enumeration.
	//
	// Documentation from the LSP specification:
	//
	//	The moniker is unique inside the moniker scheme.
	SchemeUniquenessLevel UniquenessLevel = "scheme"

	// GlobalUniquenessLevel is a member of the UniquenessLevel enumeration.
	//
	// Documentation from the LSP specification:
	//
	//	The moniker is globally unique
	GlobalUniquenessLevel UniquenessLevel = "global"
)

// Unregistration is a structure.
type Unregistration struct{}

// UnregistrationArray is an array of Unregistration elements.
type UnregistrationArray []Unregistration

// UnregistrationParams is a structure.
type UnregistrationParams struct{}

// VersionedNotebookDocumentIdentifier is a structure.
type VersionedNotebookDocumentIdentifier struct{}

// VersionedTextDocumentIdentifier is a structure.
type VersionedTextDocumentIdentifier struct{}

// WatchKind is an enumeration of UInt values.
type WatchKind UInt

const (
	// CreateWatchKind is a member of the WatchKind enumeration.
	//
	// Documentation from the LSP specification:
	//
	//	Interested in create events.
	CreateWatchKind WatchKind = 1

	// ChangeWatchKind is a member of the WatchKind enumeration.
	//
	// Documentation from the LSP specification:
	//
	//	Interested in change events
	ChangeWatchKind WatchKind = 2

	// DeleteWatchKind is a member of the WatchKind enumeration.
	//
	// Documentation from the LSP specification:
	//
	//	Interested in delete events
	DeleteWatchKind WatchKind = 4
)

// WillSaveTextDocumentParams is a structure.
type WillSaveTextDocumentParams struct{}

// WindowClientCapabilities is a structure.
type WindowClientCapabilities struct{}

// WorkDoneProgressBegin is a structure.
type WorkDoneProgressBegin struct{}

// WorkDoneProgressCancelParams is a structure.
type WorkDoneProgressCancelParams struct{}

// WorkDoneProgressCreateParams is a structure.
type WorkDoneProgressCreateParams struct{}

// WorkDoneProgressEnd is a structure.
type WorkDoneProgressEnd struct{}

// WorkDoneProgressOptions is a structure.
type WorkDoneProgressOptions struct{}

// WorkDoneProgressParams is a structure.
type WorkDoneProgressParams struct{}

// WorkDoneProgressReport is a structure.
type WorkDoneProgressReport struct{}

// WorkspaceClientCapabilities is a structure.
type WorkspaceClientCapabilities struct{}

// WorkspaceDiagnosticParams is a structure.
type WorkspaceDiagnosticParams struct{}

// WorkspaceDiagnosticReport is a structure.
type WorkspaceDiagnosticReport struct{}

// WorkspaceDiagnosticReportPartialResult is a structure.
type WorkspaceDiagnosticReportPartialResult struct{}

// WorkspaceDocumentDiagnosticReport is a union of <TODO>.
type WorkspaceDocumentDiagnosticReport interface{}

// WorkspaceDocumentDiagnosticReportArray is an array of WorkspaceDocumentDiagnosticReport elements.
type WorkspaceDocumentDiagnosticReportArray []WorkspaceDocumentDiagnosticReport

// WorkspaceEdit is a structure.
type WorkspaceEdit struct{}

// WorkspaceEditClientCapabilities is a structure.
type WorkspaceEditClientCapabilities struct{}

// WorkspaceEditClientCapabilitiesChangeAnnotationSupport is a literal structure.
type WorkspaceEditClientCapabilitiesChangeAnnotationSupport struct{}

// WorkspaceEditDocumentChanges is a union of <TODO>.
type WorkspaceEditDocumentChanges interface{}

// WorkspaceEditDocumentChangesArray is an array of WorkspaceEditDocumentChanges elements.
type WorkspaceEditDocumentChangesArray []WorkspaceEditDocumentChanges

// WorkspaceFolder is a structure.
type WorkspaceFolder struct{}

// WorkspaceFolderArray is an array of WorkspaceFolder elements.
type WorkspaceFolderArray []WorkspaceFolder

// WorkspaceFoldersChangeEvent is a structure.
type WorkspaceFoldersChangeEvent struct{}

// WorkspaceFoldersInitializeParams is a structure.
type WorkspaceFoldersInitializeParams struct{}

// WorkspaceFoldersInitializeParamsWorkspaceFolders is a union of <TODO>.
type WorkspaceFoldersInitializeParamsWorkspaceFolders interface{}

// WorkspaceFoldersServerCapabilities is a structure.
type WorkspaceFoldersServerCapabilities struct{}

// WorkspaceFoldersServerCapabilitiesChangeNotifications is a union of <TODO>.
type WorkspaceFoldersServerCapabilitiesChangeNotifications interface{}

// WorkspaceFullDocumentDiagnosticReport is a structure.
type WorkspaceFullDocumentDiagnosticReport struct{}

// WorkspaceFullDocumentDiagnosticReportVersion is a union of <TODO>.
type WorkspaceFullDocumentDiagnosticReportVersion interface{}

// WorkspaceSymbol is a structure.
type WorkspaceSymbol struct{}

// WorkspaceSymbolArray is an array of WorkspaceSymbol elements.
type WorkspaceSymbolArray []WorkspaceSymbol

// WorkspaceSymbolClientCapabilities is a structure.
type WorkspaceSymbolClientCapabilities struct{}

// WorkspaceSymbolClientCapabilitiesResolveSupport is a literal structure.
type WorkspaceSymbolClientCapabilitiesResolveSupport struct{}

// WorkspaceSymbolClientCapabilitiesSymbolKind is a literal structure.
type WorkspaceSymbolClientCapabilitiesSymbolKind struct{}

// WorkspaceSymbolClientCapabilitiesTagSupport is a literal structure.
type WorkspaceSymbolClientCapabilitiesTagSupport struct{}

// WorkspaceSymbolLocation is a union of <TODO>.
type WorkspaceSymbolLocation interface{}

// WorkspaceSymbolLocationOption2 is a literal structure.
type WorkspaceSymbolLocationOption2 struct{}

// WorkspaceSymbolOptions is a structure.
type WorkspaceSymbolOptions struct{}

// WorkspaceSymbolParams is a structure.
type WorkspaceSymbolParams struct{}

// WorkspaceSymbolRegistrationOptions is a structure.
type WorkspaceSymbolRegistrationOptions struct{}

// WorkspaceUnchangedDocumentDiagnosticReport is a structure.
type WorkspaceUnchangedDocumentDiagnosticReport struct{}

// WorkspaceUnchangedDocumentDiagnosticReportVersion is a union of <TODO>.
type WorkspaceUnchangedDocumentDiagnosticReportVersion interface{}

// initializeParams is a structure.
type initializeParams struct{}
